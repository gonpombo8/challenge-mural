###
Log of the most important decisions i made.

I decided to use express to serve front-end files like the bower_components, javascript controllers and templates.
At first, i started using jquery to write the front-end client to do it faster and test if it really works what i was planning to do. Then i decided to refactor the code and migrate it to AngularJS, where i am more confortable.
The first approach was that when a user scrolls a document, jasvascript will catch this event (window.onscroll), and send to Nodejs the height of the scroll bar (window.pageYOffset). Also when the user recieve a height position from the back-end, update the scroll bar on the client (window.scrollTo(x, y)).
One problem that i was having was that when a user scroll, all the others users were getting that position, but when this happends the window.onscroll event was fire again on each client, so they were sending duplicate information that was irrelevant.

Create rooms to have more than one document to read collaboratively, using socket.io rooms to manage it independently the documents. I decided to use rooms instead of namespaces, so it was transparent to nodejs if you have one document or N, you only need to created a template on angularjs and config the route.

Use cookies to store username to see who scrolls the document.

If a user joins the session and there's another user connected, nodejs send the positon of the user connected. I stored scroll position in memory (var) cause only has one cluster and one instance. Another way was to request the user connected the position with sockets and send it to the new user, or store the position on redis or mongodb.